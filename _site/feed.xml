<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录生活,学习中的点点滴滴</title>
    <description>一个热爱生活,喜欢编程,梦想是在编程方面成为大牛</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Oct 2019 18:03:13 +0800</pubDate>
    <lastBuildDate>Thu, 17 Oct 2019 18:03:13 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>我的个人笔记</title>
        <description>&lt;h4 id=&quot;目录&quot;&gt;目录&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Docker学习笔记
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://localhost:4000/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/&quot;&gt;Docker基本概念&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SpringBoot知识&lt;/li&gt;
  &lt;li&gt;SpringCloud知识&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;数据库&lt;/li&gt;
  &lt;li&gt;linux知识&lt;/li&gt;
  &lt;li&gt;mq知识&lt;/li&gt;
  &lt;li&gt;nosql知识&lt;/li&gt;
  &lt;li&gt;随笔&lt;/li&gt;
  &lt;li&gt;大数据&lt;/li&gt;
  &lt;li&gt;生活&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 17 Oct 2019 17:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</guid>
        
        <category>list</category>
        
        <category>java</category>
      </item>
    
      <item>
        <title>Docker学习笔记(二)环境安装和基本命令</title>
        <description>&lt;h3 id=&quot;docker-环境安装&quot;&gt;docker 环境安装&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;环境准备： &lt;ul&gt; &lt;li&gt;centos7虚拟机一台(linux内核必须在3.0 以上的才可以安装docker环境)&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;安装步骤: &lt;strong&gt;&lt;em&gt;1. 确认linux机器可以链接网络&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping www.baidu.com &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;出现如下:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PING www.a.shifen.com &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;61.135.169.125&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data. 64 bytes from 61.135.169.125 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;61.135.169.125&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: icmp_seq~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|1 ttl~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|128 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|3.55 ms 64 bytes from 61.135.169.125 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;61.135.169.125&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: icmp_seq~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|2 ttl~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|128 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;|2.93 ms ~|-|~|-|~|-| www.a.shifen.com ping statistics ~|-|~|-|~|-| 2 packets transmitted, 2 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;1001ms rtt min/avg/max/mdev ~|&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;| 2.937/3.243/3.550/0.311 ms &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;2.使用yum安装docker&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install docker 日志如下: 已加载插件：fastestmirror Loading...</description>
        <pubDate>Tue, 17 Oct 2017 17:29:33 +0800</pubDate>
        <link>http://localhost:4000/docker%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/docker%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
        
        <category>docker</category>
        
        <category>安装docker</category>
        
        <category>docker命令</category>
        
        <category>docker</category>
      </item>
    
      <item>
        <title>Docker学习笔记(三)Dockerfile的概念及其编写</title>
        <description>&lt;h3 id=&quot;dockerfile的概念及其编写&quot;&gt;Dockerfile的概念及其编写&lt;/h3&gt; &lt;p&gt;Dockerfile可以允许用户创建自定义的镜像&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1基本结构&lt;/strong&gt;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;Dockerfile由一行行命令组成，并且支持以#开头的注释行，一般，Dockerfile分为4部分：&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;基础镜像信息&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;维护者信息&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;镜像操作指令&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;容器启动执行指令&lt;/p&gt; &lt;p&gt;&lt;strong&gt;指令&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;strong&gt;1. FROM&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为 FROM &lt;image&gt; 或 FROM&lt;image&gt;:&lt;tag&gt;&lt;/tag&gt;&lt;/image&gt;&lt;/image&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;第一条指令必须为FROM指令，并且，如果同一个Dockerfile中创建多个镜像，可以使用多个FROM指令&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;2.MAINTAINER&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为 MAINTAINER&lt;name&gt;,指定维护者的信息&lt;/name&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;3.RUN&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为RUN&lt;command /&gt; 或 RUN [“executable”, “param1”, “param2”] ,&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;前者将在shell终端中运行命令，即/bin/sh -c,后者使用exec执行。指定使用其他终端可以通过这种方式实现&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;4.CMD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;支持三种格式:&lt;/p&gt; &lt;p&gt;CMD [“executable”,”param1”,”param2”] 使用 exec 执行,推荐方式;&lt;/p&gt; &lt;p&gt;CMD command param1 param2 在 /bin/sh 中执行,提供给需要交互的应用;&lt;/p&gt; &lt;p&gt;CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;指定启动容器时执行的命令,每个Dockerfile只能有一条CMD命令,如果指定了多条命令,只有最后一条会被执行,如果用户启动容器时指定了运行命令,则会覆盖掉CMD指定的命令&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;5.EXPOSE&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为 EXPOSE &lt;port&gt; [&lt;port&gt;...]&lt;/port&gt;&lt;/port&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;告诉Docker服务端容器暴露的端口号,供系统互联使用,在容器启动时需要通过-P,Docker主机会自动分配一个端口转发到指定的端口&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;6.ENV&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为ENV&lt;key&gt; &lt;value&gt;.指定一个环境变量,会被后续RUN命令使用,并在容器运行时保持&lt;/value&gt;&lt;/key&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;7.ADD&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;格式为 ADD&lt;src&gt; &lt;dest&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;该命令将复制指定的&lt;src&gt;到容器中的&lt;dest&gt; ,其中&lt;src&gt;可以是Dockerfile所在目录的一个相对路径,也可以是一个url,还可以是一个tar文件(自动解压为目录)&lt;/src&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;8.COPY&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;复制本地主机的 &lt;src&gt; (为 Dockerfile 所在目录的相对路径)到容器中的 &lt;dest&gt; 。 当使用本地目录为源目录时,推荐使用...</description>
        <pubDate>Tue, 17 Oct 2017 17:29:33 +0800</pubDate>
        <link>http://localhost:4000/Dockerfile%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E7%BC%96%E5%86%99/</link>
        <guid isPermaLink="true">http://localhost:4000/Dockerfile%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E7%BC%96%E5%86%99/</guid>
        
        <category>dockerfile</category>
        
        <category>docker</category>
      </item>
    
      <item>
        <title>Docker(一)基本概念</title>
        <description>&lt;h3 id=&quot;1-docker简介&quot;&gt;1. docker简介&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Docker 是一个开源项目,诞生于 2013 年初,最初是 dotCloud 公司内部的一个业余项目。它基于 Google公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会,遵从了 Apache 2.0 协议,项目代码在 GitHub上进行维护。&lt;/li&gt; &lt;li&gt;Docker 自开源后受到广泛的关注和讨论,以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker;Google 也在其 PaaS 产品中广泛应用。&lt;/li&gt; &lt;li&gt;Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器(LXC)等技术。 在 LXC 的基础上 Docker 进行了进一步的封装,让用户不需要去关心容器的管理,使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。&lt;/li&gt; &lt;li&gt;下面的图片比较了 Docker 和传统虚拟化方式的不同之处,可见容器是在操作系统层面上实现虚拟化,直接复用本地主机的操作系统,而传统方式则是在硬件层面实现&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190805153621681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzU0NjMx,size_16,color_FFFFFF,t_70&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;2docker的优点&quot;&gt;2.docker的优点&lt;/h3&gt; &lt;p&gt;作为一种新兴的虚拟化方式,Docker 跟传统的虚拟化方式相比具有众多的优势。 &lt;strong&gt;1.&lt;/strong&gt; 首先,Docker 容器的启动可以在秒级实现,这相比传统的虚拟机方式要快得多。 其次,Docker 对系统资 源的利用率很高,一台主机上可以同时运行数千个 Docker 容器。 **2. **容器除了运行其中应用外,基本不消耗额外的系统资源,使得应用的性能很高,同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机,而Docker 只需要启动 10 个隔离的应用即可。&lt;/p&gt; &lt;p&gt;具体说来,Docker 在如下几个方面具有较大的优势。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;更快速的交付和部署&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;对开发和运维(devop)人员来说,最希望的就是一次创建或配置,可以在任意地方正常运行。开发者可以使用一个标准的镜像来构建一套开发容器,开发完成之后,运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器,快速迭代应用程序,并让整个过程全程可见,使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快!容器的启动时间是秒级的,大量地节约开发、测试、部署的时间。&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;更高效的虚拟化&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;Docker 容器的运行不需要额外的 hypervisor 支持,它是内核级的虚拟化,因此可以实现更高的性能和效率。&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;更轻松的迁移和扩展&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;...</description>
        <pubDate>Tue, 17 Oct 2017 17:28:33 +0800</pubDate>
        <link>http://localhost:4000/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
        
        <category>docker</category>
        
        <category>docker</category>
      </item>
    
  </channel>
</rss>
